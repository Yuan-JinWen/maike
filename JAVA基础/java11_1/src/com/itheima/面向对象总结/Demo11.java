package com.itheima.面向对象总结;

/*
    1.什么是类? 对一类事物的描述

    2.类的组成:(iPhone图纸)
        成员变量:属性
        成员方法:行为

    3.什么是对象:(一部32G的土豪金iPhone8plus)
        类创建出来的具体事物

    4.如何创建对象
        类名 变量名 = new 类名(参数);
        //  Phone p = new Pone("iphone8" ,8888)

    5.为什么要封装?
        私有后提高安全性.别人不能直接用


    6.怎么实现封装?
        1.成员变量私有private
        private void set (){}
        私有    返回值  方法名(){}

        2.提供对应的getXxx/setXxx方法
          Alt+ Insert

    7.构造方法的作用?
        在创建对象的时候给成员变量赋值


    8.构造方法的格式?
        public 类名() {
        }

        public 类名(数据类型1 变量名1,...) {
        }

     9.构造方法注意事项:
        1.构造方法名和类名相同
        2.没有返回值.连void不能写
        3.一个类不写构造方法会默认有一个无参的 public 类名() {}
        4.如果写了构造,不会再有默认的.

     10.API:Java写好的类.直接拿来用
        查询API,从上往下看
        1.看包名,用于导包
        2.看类的说明,知道这个类能干什么事情
        3.看构造方法.用于创建对象
        4.看普通方法.知道如何调用方法

      11.ArrayList的使用:
        1.创建ArrayList对象
            ArrayList<数据类型> 变量名 = new ArrayList<>();
        2.ArrayList的常用方法
            2.1 add: 添加数据
            2.2 set: 修改数据
            2.3 get: 获取数据
            2.4 remove: 删除数据
            2.5 size: 集合长度

     12.什么是继承?
        在现有类的基础上写一个新的类.现有类称为父类,新的类称为子类.子类会自动拥有父类的内容

     13.继承的好处:
        1.提高代码的复用性
        2.为多态提供了前提

     14.继承的格式:
        class 子类名 extends 父类名 {

        }

     15.重写(override):
        子类写了一个和父类一模一样的方法.

        1.重写是父类和子类之间的事情
        2.方法名要相同
        3.返回值一样
        4.参数列表一样
        5.子类方法的权限大于等于父类方法的权限

     16.抽象方法:
        只有方法声明,没有方法体的方法.子类向上抽取,发现有共同的方法.但是每个子类执行代码不一样

     17.抽象方法的定义格式:
        public abstract void 方法名();

     18.抽象方法需要放在抽象类中
        abctract class 类名 {
        }

     19.抽象方法需要子类取重写

     20.static:
        1.static可以修饰成员变量和成员方法
        2.static修饰的成员变量,放在静态区.所有对象都可以使用
        3.static修饰的成员方法.静态方法只能访问静态内容

     21.什么是接口:
        接口也是一种数据类型,主要用放抽象方法.接口中方法的方法是某些对象会的(打麻将,抽烟)

     22.接口的定义格式:
        interface 接口名 {
            public abstract void 方法名();
            public default void 方法名() {
                // ... 代码
            }
            public static void 方法名() {
                // ... 代码
            }

            private void 方法名() {
                // ... 代码
            }
        }

      23.类实现接口格式:
        class 类名 implements 接口名 {
            // 重写抽象方法
        }

      24.一个类可以实现多个接口,一个类只能继承一个父类

      25.什么是多态?
        一个事物的多种形态

      26.多态的前提?
        1.要有继承关系
        2.要重写方法


      27.多态的格式?
        父类 变量名 = new 子类();
        接口 变量名 = new 实现类();

        多态走子类重写方法

     28.多态的好处?
        在参数传递的时候形成多态,方法参数要父类,可以任意的子类对象.提高代码的扩展性

     29.向上转型:多态
        父类 变量名 = new 子类();
        弊端:只能使用父类中定义的方法,不能使用子类的特有方法

     30.向下转型:
        子类 变量名 = (子类)变量;

        注意:只有变量本来new的时候是什么类型,才能转成什么类型

      31.instanceof关键字
           boolean b = 变量 instanceo 类名;
           判断变量是否是[类名]这种类型
           在向下转型的时候进行判断.保证向下转型不会出错
 */

public class Demo11 {
    public static void main(String[] args) {

    }
}
